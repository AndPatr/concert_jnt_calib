XBotInterface:
 urdf_path: $PWD/../description/urdf/awesome_leg_xbot.urdf
 srdf_path: $PWD/../description/srdf/awesome_leg.srdf

ModelInterface:
  model_type: RBDL
  is_model_floating_base: false

# hal
xbotcore_device_configs:
    sim: $(rospack find concert_xbot2)/hal/ModularBot_gz.yaml
    dummy: $(rospack find concert_xbot2)/hal/ModularBot_dummy.yaml
    ec_imp: $(rospack find concert_xbot2)/hal/ModularBot_ec_all.yaml
    ec_idle: $(rospack find concert_xbot2)/hal/ModularBot_ec_all.yaml

xbotcore_threads:
    rt_main:  {sched: fifo , prio: 60, period: 0.005, core_id: 1}
    nrt_main: {sched: other, prio: 0 , period: 0.01}

# plugins
xbotcore_plugins:

    ros_io: {thread: nrt_main, type: ros_io}

    ros_control: {thread: nrt_main, type: ros_control}

    ec_ros: {thread: nrt_main, type: ec_ros}

    traj_replayer:
        thread: rt_main
        type: calib_traj_replayer_rt
        params:

            verbose: {value: false, type: bool}

            approach_traj_exec_time: {value: 10.0, type: double}

            traj_execution_time: {value: 300.0, type: double}
            f0: {value: 0.1, type: double} # initial freq value for sweep calibration traj.
            ff: {value: 0.3, type: double} # final freq value for sweep calibration traj.
            t_exec_f: {value: 10.0, type: double} # time to ramp from f0 to ff

            rot_calib_window_size: {value: 10000, type: int}
            alpha: {value: 5, type: int}
            q_dot_3sigma: {value: 0.01, type: double}
            cal_mask: {value: [false, true, true, false], type: vector<bool>} # which components of rotor's dynamics to calibrate: [K_t, K_d0, K_d1, rot_MoI]
            lambda: {value: [0.1, 0.001, 0.001, 0.1], type: Eigen::VectorXd}
            lambda_high: {value: [1e14, 1e6, 1e6, 1e14], type: Eigen::VectorXd}
            mov_avrg_cutoff_freq: {value: 5.0, type: double} # [Hz]
            set_ig_to_prev_sol: {value: true, type: bool}

            jnt_list: {value: ["hip_pitch_1", "knee_pitch_1"], type: vector<string>} # joints to be calibrated

            q_ub: {value: [2.0, -2.0], type: vector<double>}
            q_lb: {value: [-2.0, 2.0], type: vector<double>}

            red_ratio: {value: [0.02, 0.02], type: Eigen::VectorXd}  # gear reduction ratio of the actuator (always <=1)

            K_t: {value: [0.045, 0.045], type: Eigen::VectorXd} # torque constants ([Nm/A])
            rotor_MoI: {value: [6.5717708e-5, 6.5717708e-5], type: Eigen::VectorXd}  # axial moment of inertia of the rotor ([Kg m^2]); real value 6.5717708e-5
            K_d0: {value: [0.0, 0.0], type: Eigen::VectorXd}
            K_d1: {value: [0.0, 0.0], type: Eigen::VectorXd}

            K_t_ig: {value: [0.045, 0.045], type: Eigen::VectorXd}
            rot_MoI_ig: {value: [6.5717708e-5, 6.57177086e-5], type: Eigen::VectorXd}
            K_d0_ig: {value: [0.0, 0.0], type: Eigen::VectorXd} # initial guess for the static friction torque coefficient ( tau_d0 = K_d* sign(joint_vel) )
            K_d1_ig: {value: [0.0, 0.0], type: Eigen::VectorXd} # initial guess for the dynamical friction torque coefficient ( tau_d1 = K_d* joint_vel )

            K_t_nom: {value: [0.045, 0.045], type: Eigen::VectorXd}
            rot_MoI_nom: {value: [6.5717708e-5, 6.57177086e-5], type: Eigen::VectorXd}
            K_d0_nom: {value: [3.24, 10.72], type: Eigen::VectorXd} # initial guess for the static friction torque coefficient ( tau_d0 = K_d* sign(joint_vel) )
            K_d1_nom: {value: [1.45, 1.77], type: Eigen::VectorXd} # initial guess for the dynamical friction torque coefficient ( tau_d1 = K_d* joint_vel )


# global parameters
xbotcore_param:
    /jm/tx_filter_autostart: {value: true, type: bool}
    /jm/tx_filter_cutoff: {value: 2.0, type: double}
    # /jm/tx_filter_cutoff: {value: 500.0, type: double}
    /jm/enable_safety: {value: true, type: bool}  # safety checks (can be disabled in running a simulation. DO NOT DO THIS ON A REAL PROTOTYPE)
